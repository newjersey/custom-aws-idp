package gov.nj.innovation.customAwsIdp.lambda;

import java.util.Map;
import java.util.regex.Pattern;

import gov.nj.innovation.customAwsIdp.keys.KeyConstants;
import gov.nj.innovation.customAwsIdp.keys.KeysWrapper;
import gov.nj.innovation.customAwsIdp.SamlGenerator;
import org.apache.log4j.Logger;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;

/**
 * Handler modified from code generated by Serverless ({@code com.serverless.Handler}).
 *
 * @author Case Walker (case@innovation.nj.gov)
 */
public class Handler implements RequestHandler<Map<String, Object>, String> {

    private static final Logger logger = Logger.getLogger(Handler.class);
    private static final String DEFAULT_DURATION = System.getenv("DEFAULT_SESSION_DURATION");
    private static final Pattern DIGITS_PATTERN = Pattern.compile("\\d+");

    @Override
    public String handleRequest(Map<String, Object> input, Context context) {
        final String user = (String) input.get("user");
        final String ssoRole = (String) input.get("ssoRole");
        String duration = (String) input.getOrDefault("duration", DEFAULT_DURATION);

        if (user == null || user.isBlank() || ssoRole == null || ssoRole.isBlank()) {
            final String errorMessage =
                    String.format("user and ssoRole must have non-empty values, had %s and %s (full input %s)",
                            user, ssoRole, input);
            logger.error(errorMessage);
            return new Response(400, null, errorMessage).toString();
        }

        if (duration == null || duration.isBlank() || !DIGITS_PATTERN.matcher(duration).matches() ||
                Integer.parseInt(duration) < 900 || Integer.parseInt(duration) > 43200) {
            final String errorMessage =
                    String.format("Invalid duration, must be an int between 900 and 43200, was %s (full input %s)",
                            duration, input);
            logger.error(errorMessage);
            return new Response(400, null, errorMessage).toString();
        }

        final KeyConstants keyConstants;
        try {
            keyConstants = new KeyConstants();
        } catch (NullPointerException | NumberFormatException e) {
            final String errorMessage =
                    String.format("KeyConstants threw an exception: %s,\n" +
                                    "Please check that the key-secrets are correct in AWS Systems Manager",
                            e.getMessage());
            logger.error(errorMessage, e);
            return new Response(500, null, errorMessage).toString();
        }

        try {
            final KeysWrapper keys = new KeysWrapper(keyConstants);
            final SamlGenerator samlGenerator = new SamlGenerator(user, ssoRole, duration, keys);
            final String encodedSamlResponse = samlGenerator.getBase64SamlResponse();
            logger.info(String.format("SAMLResponse successfully generated for user %s with role %s and duration %s",
                    user, ssoRole, duration));
            return new Response(200, encodedSamlResponse, null).toString();

        } catch (Exception e) {
            final String errorMessage =
                    String.format("Error in handler: user %s, ssoRole %s, duration %s; full input %s",
                            user, ssoRole, duration, input);
            logger.error(errorMessage, e);
            return new Response(500, null, errorMessage).toString();
        }
    }
}