plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

dependencies {
    api(
        // From the Serverless generated code
        libs.comAmazonaws.awsLambdaJavaCore,
        // For getting the Cognito UserPool Group Description, reading YAML, and accessing SSM
        libs.softwareAmazonAwssdk.cognitoidentityprovider,
        libs.comFasterxmlJacksonDataformat.jacksonDataformatYaml,
        libs.softwareAmazonAwssdk.ssm,
        // For SAML generation, from Keycloak
        libs.orgKecloak.keycloakSamlCore,
        libs.orgKecloak.keycloakAdapterCore,
        libs.orgKecloak.keycloakServices,
    )
    implementation(
        libs.orgApacheLoggingLog4j.log4jSlf4j2Impl,
        libs.orgApacheLoggingLog4j.log4jCore,
        libs.orgApacheLoggingLog4j.log4jApi
    )
    runtimeOnly libs.comAmazonaws.awsLambdaJavaLog4j2
    testImplementation(
        libs.orgJunitJupiter.junitJupiter,
        libs.orgJunitJupiter.junitJupiterApi,
        libs.orgJunitJupiter.junitJupiterParams,
        libs.ukOrgWebcompare.systemStubsJupiter,
        libs.orgMockito.mockitoCore
    )
    testRuntimeOnly libs.orgJunitPlatform.junitPlatformLauncher
}

test {
    jvmArgs "-Xshare:off"
    environment([
        // Provide env vars for KeyConstants + testing odds and ends
        "KEY_PRIVATE_EXPONENT_NAME": "custom-aws-idp-private-key-private-exponent",
        "KEY_PRIME_P_NAME": "custom-aws-idp-private-key-prime-p",
        "KEY_PRIME_Q_NAME": "custom-aws-idp-private-key-prime-q",
        "KEY_PRIME_EXPONENT_P_NAME": "custom-aws-idp-private-key-prime-exponent-p",
        "KEY_PRIME_EXPONENT_Q_NAME": "custom-aws-idp-private-key-prime-exponent-q",
        "KEY_CRT_COEFFICIENT_NAME": "custom-aws-idp-private-key-crt-coefficient",
        "COGNITO_REGION": "us-east-1",
        "COGNITO_USER_POOL": "myPoolOfCoolUsers",
        "DEFAULT_SESSION_DURATION": 900,
        "PATH_PARAMETER_GROUP_NAME": "groupName",
    ])
    useJUnitPlatform()
}

// Task for building the zip file for upload
tasks.register('buildZip', Zip) {
    // Using the Zip API from gradle to build a zip file of all the dependencies
    //
    // The path to this zip file can be set in the serverless.yml file for the
    // package/artifact setting for deployment to the S3 bucket
    //
    // Link: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Zip.html

    // set the base name of the zip file
    archiveBaseName = "customIdp"
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}

build.dependsOn buildZip

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}
